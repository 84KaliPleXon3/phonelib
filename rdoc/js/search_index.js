var search_data = {"index":{"searchIndex":["phonelib","core","phone","validators","phonevalidator","countries()","country()","impossible?()","impossible?()","invalid?()","invalid?()","invalid_for_country?()","invalid_for_country?()","new()","parse()","possible?()","possible?()","type()","types()","valid?()","valid?()","valid_for_country?()","valid_for_country?()","validate_each()","readme"],"longSearchIndex":["phonelib","phonelib::core","phonelib::phone","phonelib::validators","phonelib::validators::phonevalidator","phonelib::phone#countries()","phonelib::phone#country()","phonelib::core#impossible?()","phonelib::phone#impossible?()","phonelib::core#invalid?()","phonelib::phone#invalid?()","phonelib::core#invalid_for_country?()","phonelib::phone#invalid_for_country?()","phonelib::phone::new()","phonelib::core#parse()","phonelib::core#possible?()","phonelib::phone#possible?()","phonelib::phone#type()","phonelib::phone#types()","phonelib::core#valid?()","phonelib::phone#valid?()","phonelib::core#valid_for_country?()","phonelib::phone#valid_for_country?()","phonelib::validators::phonevalidator#validate_each()",""],"info":[["Phonelib","","Phonelib.html","",""],["Phonelib::Core","","Phonelib/Core.html","","<p>main module that includes all basic data and methods\n"],["Phonelib::Phone","","Phonelib/Phone.html","","<p>class for parsed phone number, includes basic validation methods\n"],["Phonelib::Validators","","Phonelib/Validators.html","","<p>Module includes all ActiveModel validators classes\n"],["Phonelib::Validators::PhoneValidator","","Phonelib/Validators/PhoneValidator.html","","<p>Validator class for phone validations\n<p>Examples\n<p>Validates that attribute is a valid phone number. If empty …\n"],["countries","Phonelib::Phone","Phonelib/Phone.html#method-i-countries","()","<p>Returns all countries that matched valid patterns\n"],["country","Phonelib::Phone","Phonelib/Phone.html#method-i-country","()","<p>Returns first country that matched valid patterns\n"],["impossible?","Phonelib::Core","Phonelib/Core.html#method-i-impossible-3F","(phone_number)","<p>method checks if passed phone number is impossible\n"],["impossible?","Phonelib::Phone","Phonelib/Phone.html#method-i-impossible-3F","()","<p>Returns whether a current parsed phone number is impossible\n"],["invalid?","Phonelib::Core","Phonelib/Core.html#method-i-invalid-3F","(phone_number)","<p>method checks if passed phone number is invalid\n"],["invalid?","Phonelib::Phone","Phonelib/Phone.html#method-i-invalid-3F","()","<p>Returns whether a current parsed phone number is invalid\n"],["invalid_for_country?","Phonelib::Core","Phonelib/Core.html#method-i-invalid_for_country-3F","(phone_number, country)","<p>method checks if passed phone number is invalid for provided country\n"],["invalid_for_country?","Phonelib::Phone","Phonelib/Phone.html#method-i-invalid_for_country-3F","(country)","<p>Returns whether a current parsed phone number is invalid for specified\ncountry\n<p>Attributes\n<p><code>country</code> - ISO ...\n"],["new","Phonelib::Phone","Phonelib/Phone.html#method-c-new","(phone, country_data)","<p>class initialization method\n<p>Attributes\n<p><code>phone</code> - Phone number for parsing\n"],["parse","Phonelib::Core","Phonelib/Core.html#method-i-parse","(phone)","<p>method for parsing phone number on first run fills @@phone_data with data\npresent in yaml file\n"],["possible?","Phonelib::Core","Phonelib/Core.html#method-i-possible-3F","(phone_number)","<p>method checks if passed phone number is possible\n"],["possible?","Phonelib::Phone","Phonelib/Phone.html#method-i-possible-3F","()","<p>Returns whether a current parsed phone number is possible\n"],["type","Phonelib::Phone","Phonelib/Phone.html#method-i-type","()","<p>Returns first phone type that matched\n"],["types","Phonelib::Phone","Phonelib/Phone.html#method-i-types","()","<p>Returns all phone types that matched valid patterns\n"],["valid?","Phonelib::Core","Phonelib/Core.html#method-i-valid-3F","(phone_number)","<p>method checks if passed phone number is valid\n"],["valid?","Phonelib::Phone","Phonelib/Phone.html#method-i-valid-3F","()","<p>Returns whether a current parsed phone number is valid\n"],["valid_for_country?","Phonelib::Core","Phonelib/Core.html#method-i-valid_for_country-3F","(phone_number, country)","<p>method checks if passed phone number is valid for provided country\n"],["valid_for_country?","Phonelib::Phone","Phonelib/Phone.html#method-i-valid_for_country-3F","(country)","<p>Returns whether a current parsed phone number is valid for specified\ncountry\n<p>Attributes\n<p><code>country</code> - ISO code ...\n"],["validate_each","Phonelib::Validators::PhoneValidator","Phonelib/Validators/PhoneValidator.html#method-i-validate_each","(record, attribute, value)","<p>Validation method\n"],["README","","README_rdoc.html","","<p>begin\n<p>Phonelib\n<p><img src=\"https://travis-ci.org/daddyz/phonelib.png?branch=master\"\nalt=\"Build Status\" /> …\n"]]}}